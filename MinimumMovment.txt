def minimumMovement(obstacleLanes)
    mat = []
    lane = 1
    moves = 0
    obstacleLanes.each do |v|
        mat << [1,0,0] if v == 1
        mat << [0,1,0] if v == 2
        mat << [0,0,1] if v == 3
    end
    mat.each_with_index do |vec, i|
        break if i+1 >= mat.size
        next if vec[lane] == 0
        if vec[lane] != 0
            moves += 1
            lane = bestPath(mat, i, lane)
        end
    end
    return moves
end
def bestPath(matrix, now, lane)
    op1 = 0
    op2 = 0
    if lane == 0
        for i in now..matrix.size
            if matrix[i][1] == 0
                op1 += 1
            else
                break
            end
            if matrix[i][2] == 0
                op2 += 1
            else
                break
            end 
        end
        op1 > op2 ? 1 : 2
    elsif lane == 1
        for i in now..matrix.size
            if matrix[i][0] == 0
                op1 += 1
            else
                break
            end
            if matrix[i][2] == 0
                op2 += 1
            else
                break
            end 
        end
        op1 > op2 ? 0 : 2
    elsif lane == 2
        for i in now..matrix.size
            if matrix[i][0] == 0
                op1 += 1
            else
                break
            end
            if matrix[i][1] == 0
                op2 += 1
            else
                break
            end 
        end
        op1 > op2 ? 0 : 1
    end
end